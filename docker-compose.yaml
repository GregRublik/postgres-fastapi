services:

  app:
    build:
      context: .
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy
#      celery:
#        condition: service_healthy
    ports:
      - ${APP_PORT}:${APP_PORT}
    env_file:
      - .env
    networks:
      - mynetwork

  postgres:
    image: postgres:latest
    container_name: ${DB_NAME}
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASS}
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_HOST_AUTH_METHOD: scram-sha-256
    ports:
      - ${DB_PORT}:${DB_PORT}
    volumes:
      - postgres-data:/var/lib/postgresql/data
    env_file:
      - .env
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}" ]
      interval: 2s
      timeout: 2s
      retries: 10
    networks:
      - mynetwork

  rabbitmq:
    image: rabbitmq:3.13-management-alpine
    hostname: rabbitmq
    restart: always
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD}
      RABBITMQ_DEFAULT_VHOST: /
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq
    ports:
      - "15672:15672"  # RabbitMQ Management UI
      - "5672:5672"    # AMQP port
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - mynetwork
    env_file:
      - .env

  celery:
    build:
      context: .
      dockerfile: celery.Dockerfile
    depends_on:
      redis:
        condition: service_healthy
    env_file:
      - .env
    networks:
      - mynetwork
    # Для production можно добавить:
    # restart: unless-stopped
    # deploy:
    #   replicas: 2  # Масштабирование воркеров

  redis:
    image: redis:latest
    container_name: redis
    hostname: redis  # Добавляем явное указание hostname
    env_file:
      - .env
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - REDIS_USER=${REDIS_USER}
      - REDIS_USER_PASSWORD=${REDIS_USER_PASSWORD}
    ports:
      - "${REDIS_PORT}:${REDIS_PORT}"
    volumes:
      - redis-data:/data
    deploy:
      resources:
        limits:
          cpus: '0.50'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5
    restart: unless-stopped

networks:
  mynetwork:
    driver: bridge

volumes:
  postgres-data:
  rabbitmq-data:
  redis-data:
